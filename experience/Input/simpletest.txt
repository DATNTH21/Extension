import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.assertThrows;
import static org.junit.jupiter.api.Assertions.*;

import java.io.IOException;
import java.util.List;
import java.util.stream.Collectors;

import static org.mockito.Mockito.*;

public class ComplexLogicTest {

    @Test
    public void testEvaluateNegativeNumber() {
        ComplexLogic logic = new ComplexLogic();
        String result = logic.evaluate(-1, "text");
        assertEquals("Negative number", result);
    }

    @Test
    public void testEvaluateZeroWithNoText() {
        ComplexLogic logic = new ComplexLogic();
        String result = logic.evaluate(0, null);
        assertEquals("Zero with no text", result);
    }

    @Test
    public void testEvaluateZeroWithText() {
        ComplexLogic logic = new ComplexLogic();
        String result = logic.evaluate(0, "Sample Text");
        assertEquals("Zero with text: Sample Text", result);
    }

    @Test
    public void testEvaluatePositiveWithLongText() {
        ComplexLogic logic = new ComplexLogic();
        String result = logic.evaluate(5, "This is a long text with more than 5 characters");
        assertEquals("Positive with long text", result);
    }

    @Test
    public void testEvaluatePositiveWithShortText() {
        ComplexLogic logic = new ComplexLogic();
        String result = logic.evaluate(3, "Hi");
        assertEquals("Positive with short or no text", result);
    }

    @Test
    public void testReadFileValidPath() throws IOException {
        ComplexLogic logic = new ComplexLogic();
        // Mock file reading behavior using Mockito
        when(Files.readAllLines(any(Path.class))).thenReturn(List.of("line1", "line2"));

        String result = logic.readFile("valid/path/to/file.txt");
        assertEquals("line1\nline2", result);

        verify(Files, times(1)).readAllLines(any(Path.class));
    }

    @Test
    public void testReadFileNullPath() {
        ComplexLogic logic = new ComplexLogic();
        assertThrows(IllegalArgumentException.class, () -> logic.readFile(null));
    }

    @Test
    public void testReadFileEmptyPath() {
        ComplexLogic logic = new ComplexLogic();
        assertThrows(IllegalArgumentException.class, () -> logic.readFile(""));
    }

    @Test
    public void testRandomOutcomeDistribution() {
        ComplexLogic logic = new ComplexLogic();
        int lowCount = 0;
        int mediumCount = 0;
        int highCount = 0;

        for (int i = 0; i < 1000; i++) {
            String result = logic.randomOutcome();
            if (result.equals("Low")) {
                lowCount++;
            } else if (result.equals("Medium")) {
                mediumCount++;
            } else {
                highCount++;
            }
        }

        // Adjust the expected range based on the random nature of the method
        assertTrue(lowCount > 250 && lowCount < 350);
        assertTrue(mediumCount > 250 && mediumCount < 350);
        assertTrue(highCount > 250 && highCount < 350);
    }

    @Test
    public void testProcessInputEvenNumber() {
        ComplexLogic logic = new ComplexLogic();
        String result = logic.processInput("10");
        assertEquals("Even number", result);
    }

    @Test
    public void testProcessInputOddNumber() {
        ComplexLogic logic = new ComplexLogic();
        String result = logic.processInput("7");
        assertEquals("Odd number", result);
    }

    @Test
    public void testProcessInputInvalidFormat() {
        ComplexLogic logic = new ComplexLogic();
        assertThrows(NumberFormatException.class, () -> logic.processInput("Invalid Input"));
    }

    @Test
    public void testCalculateFactorialZero() {
        ComplexLogic logic = new ComplexLogic();
        int result = logic.calculateFactorial(0);
        assertEquals(1, result);
    }

    @Test
    public void testCalculateFactorialPositiveNumber() {
        ComplexLogic logic = new ComplexLogic();
        int result = logic.calculateFactorial(5);
        assertEquals(120, result);
    }

    @Test
    public void testCalculateFactorialNegativeNumber() {
        ComplexLogic logic = new ComplexLogic();
        assertThrows(IllegalArgumentException.class, () -> logic.calculateFactorial(-1));
    }
}