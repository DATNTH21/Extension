package DemoWebAPI;

import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Random;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Random;
import java.util.List;
import java.util.stream.Collectors;

public class ComplexLogic {


    // Method with multiple branching and nested conditions
    public String evaluate(int number, String text) {
        if (number < 0) {
            return "Negative number";
        } else if (number == 0) {
            if (text == null || text.isEmpty()) {
                return "Zero with no text";
            } else {
                return "Zero with text: " + text;
            }
        } else {
            if (text != null && text.length() > 5) {
                return "Positive with long text";
            } else {
                return "Positive with short or no text";
            }
        }
    }


    // Method with external dependency (file reading)
    private String readFile(String filePath) throws IOException {
        if (filePath == null || filePath.isEmpty()) {
            throw new IllegalArgumentException("File path cannot be null or empty");
        }

        List<String> lines = Files.readAllLines(Paths.get(filePath));
        return lines.stream().collect(Collectors.joining("\n"));
    }


    // Method with random behavior
    public String randomOutcome() {
        Random random = new Random();
        int value = random.nextInt(100);


        if (value < 30) {
            return "Low";
        } else if (value < 70) {
            return "Medium";
        } else {
            return "High";
        }
    }


    // Method with exception handling and multiple catch blocks
    public String processInput(String input) {
        try {
            int number = Integer.parseInt(input);
            if (number % 2 == 0) {
                return "Even number";
            } else {
                return "Odd number";
            }
        } catch (NumberFormatException e) {
            return "Invalid number format";
        } catch (Exception e) {
            return "Unexpected error: " + e.getMessage();
        }
    }


    // Method with recursion
    public int calculateFactorial(int n) {
        if (n < 0) {
            throw new IllegalArgumentException("Negative numbers not allowed");
        }
        return (n == 0) ? 1 : n * calculateFactorial(n - 1);
    }
}