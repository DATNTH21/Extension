```json
{
  "test_functions": [
    {
      "name": "testEvaluate",
      "tested_functions": ["evaluate"],
      "test_branches": [
        {
          "condition": "number < 0",
          "cases": "negative number"
        },
        {
          "condition": "number == 0",
          "cases": [
            "Zero with no text",
            "Zero with text"
          ]
        },
        {
          "condition": "else (number > 0)",
          "cases": [
            "Positive with long text",
            "Positive with short or no text"
          ]
        }
      ]
    },
    {
      "name": "testReadFile",
      "tested_functions": ["readFile"],
      "test_branches": [
        {
          "condition": "filePath == null || filePath.isEmpty()",
          "cases": "invalid file path"
        },
        {
          "condition": "else",
          "cases": "valid file path"
        }
      ]
    },
    {
      "name": "testReadFileInvalidPath",
      "tested_functions": ["readFile"],
      "test_branches": [
        {
          "condition": "filePath == null || filePath.isEmpty()",
          "cases": "invalid file path"
        }
      ]
    },
    {
      "name": "testProcessInputValidEvenNumber",
      "tested_functions": ["processInput"],
      "test_branches": [
        {
          "condition": "number % 2 == 0",
          "cases": "even number"
        }
      ]
    },
    {
      "name": "testProcessInputValidOddNumber",
      "tested_functions": ["processInput"],
      "test_branches": [
        {
          "condition": "number % 2 == 0",
          "cases": "odd number"
        }
      ]
    },
    {
      "name": "testProcessInputInvalidNumberFormat",
      "tested_functions": ["processInput"],
      "test_branches": [
        {
          "condition": "catch (NumberFormatException e)",
          "cases": "invalid number format"
        }
      ]
    },
    {
      "name": "testProcessInputUnexpectedError",
      "tested_functions": ["processInput"],
      "test_branches": [
        {
          "condition": "catch (Exception e)",
          "cases": "unexpected error"
        }
      ]
    },
    {
      "name": "testCalculateFactorialNegative",
      "tested_functions": ["calculateFactorial"],
      "test_branches": [
        {
          "condition": "n < 0",
          "cases": "negative number"
        }
      ]
    }
  ]
}
```
